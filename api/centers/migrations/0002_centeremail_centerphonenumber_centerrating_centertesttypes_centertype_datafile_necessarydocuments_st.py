# Generated by Django 3.2.12 on 2022-04-06 20:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('centers', '0001_initial_add_postgres_extensions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CenterEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=320, unique=True, verbose_name='email')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='time created')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='time updated')),
            ],
            options={
                'verbose_name': 'email',
                'verbose_name_plural': 'emails',
            },
        ),
        migrations.CreateModel(
            name='CenterPhoneNumber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='time created')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='time updated')),
            ],
            options={
                'verbose_name': 'phone number',
                'verbose_name_plural': 'phone numbers',
            },
        ),
        migrations.CreateModel(
            name='CenterTestTypes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='test type')),
                ('name_ro', models.CharField(max_length=200, null=True, unique=True, verbose_name='test type')),
                ('name_en', models.CharField(max_length=200, null=True, unique=True, verbose_name='test type')),
            ],
            options={
                'verbose_name': 'test type',
                'verbose_name_plural': 'test types',
            },
        ),
        migrations.CreateModel(
            name='CenterType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True, verbose_name='center type')),
                ('name_ro', models.CharField(max_length=200, null=True, unique=True, verbose_name='center type')),
                ('name_en', models.CharField(max_length=200, null=True, unique=True, verbose_name='center type')),
            ],
            options={
                'verbose_name': 'center type',
                'verbose_name_plural': 'center types',
            },
        ),
        migrations.CreateModel(
            name='DataFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='name')),
                ('file', models.FileField(upload_to='', verbose_name='file')),
                ('status', models.SmallIntegerField(choices=[(0, 'Not tried'), (1, 'Imported successfully'), (-1, 'Import failed')], default=0, editable=False, verbose_name='status')),
            ],
            options={
                'verbose_name': 'Data file',
                'verbose_name_plural': 'Data files',
            },
        ),
        migrations.CreateModel(
            name='NecessaryDocuments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, unique=True, verbose_name='document name')),
                ('name_ro', models.CharField(max_length=300, null=True, unique=True, verbose_name='document name')),
                ('name_en', models.CharField(max_length=300, null=True, unique=True, verbose_name='document name')),
            ],
            options={
                'verbose_name': 'necessary document',
                'verbose_name_plural': 'necessary documents',
            },
        ),
        migrations.CreateModel(
            name='Statistic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mobile_caravans', models.IntegerField(null=True, verbose_name='mobile caravans')),
                ('hotline', models.SmallIntegerField(null=True, verbose_name='hotline')),
            ],
            options={
                'verbose_name': 'statistic',
                'verbose_name_plural': 'statistics',
            },
        ),
        migrations.CreateModel(
            name='TestingCenter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.SmallIntegerField(choices=[(0, 'Pending'), (1, 'Accepted'), (-1, 'Rejected')], db_index=True, default=0, verbose_name='status')),
                ('name', models.CharField(default='', max_length=200, verbose_name='center name')),
                ('street_number', models.CharField(max_length=100, verbose_name='street number')),
                ('street_name', models.CharField(max_length=250, verbose_name='street name')),
                ('address_details', models.CharField(blank=True, default='', max_length=250, verbose_name='address details')),
                ('county', models.CharField(max_length=60, verbose_name='county')),
                ('locality', models.CharField(max_length=60, verbose_name='locality')),
                ('full_address', models.CharField(max_length=720, verbose_name='full address')),
                ('lat', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='latitude')),
                ('lng', models.DecimalField(decimal_places=6, max_digits=9, verbose_name='longitude')),
                ('schedule_start', models.CharField(blank=True, max_length=20, null=True, verbose_name='schedule start')),
                ('schedule_end', models.CharField(blank=True, max_length=20, null=True, verbose_name='schedule end')),
                ('online_contact_type', models.SmallIntegerField(choices=[(-1, 'None'), (0, 'Email'), (1, 'Contact form'), (2, 'Schedule form')], default=-1, verbose_name='online contact type')),
                ('website', models.CharField(blank=True, max_length=200, null=True, verbose_name='website')),
                ('testing_price', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True, verbose_name='testing price')),
                ('is_free_testing_available', models.BooleanField(default=False, verbose_name='is free testing available')),
                ('free_testing_conditions', models.TextField(blank=True, null=True, verbose_name='free testing conditions')),
                ('quick_test_wait_time_minutes', models.IntegerField(blank=True, null=True, verbose_name='quick test wait time in minutes')),
                ('quick_test_wait_time_days', models.IntegerField(blank=True, null=True, verbose_name='quick test wait time in days')),
                ('negative_result_disclosure', models.SmallIntegerField(blank=True, choices=[(-1, 'Other'), (0, 'Face to face'), (1, 'Email'), (2, 'Phone'), (3, 'Mail'), (4, 'Platform')], default=-1, null=True, verbose_name='negative result disclosure')),
                ('positive_result_disclosure', models.SmallIntegerField(blank=True, choices=[(-1, 'Other'), (0, 'Face to face'), (1, 'Email'), (2, 'Phone'), (3, 'Mail'), (4, 'Platform')], default=-1, null=True, verbose_name='positive result disclosure')),
                ('has_pre_testing_counseling', models.BooleanField(default=False, verbose_name='has pre-test counseling')),
                ('pre_testing_counseling_conditions', models.TextField(blank=True, null=True, verbose_name='pre-test counseling conditions')),
                ('has_post_testing_counseling', models.BooleanField(default=False, verbose_name='has post-test counseling')),
                ('post_testing_counseling_conditions', models.TextField(blank=True, null=True, verbose_name='post-test counseling conditions')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='time created')),
                ('update_time', models.DateTimeField(auto_now=True, verbose_name='time updated')),
                ('emails', models.ManyToManyField(blank=True, related_name='centers', to='centers.CenterEmail', verbose_name='center email(s)')),
                ('necessary_documents_under_16', models.ManyToManyField(blank=True, related_name='centers_u16', to='centers.NecessaryDocuments')),
                ('necessary_documents_under_18', models.ManyToManyField(blank=True, related_name='centers_u18', to='centers.NecessaryDocuments')),
                ('phone_numbers', models.ManyToManyField(blank=True, related_name='centers', to='centers.CenterPhoneNumber', verbose_name='center phone number(s)')),
                ('test_types', models.ManyToManyField(blank=True, to='centers.CenterTestTypes', verbose_name='test types')),
                ('type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='centers', to='centers.centertype')),
            ],
        ),
        migrations.CreateModel(
            name='CenterRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.SmallIntegerField(db_index=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='rating (1-5)')),
                ('comment', models.CharField(blank=True, max_length=1000, verbose_name='comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('testing_center', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ratings', to='centers.testingcenter')),
            ],
            options={
                'verbose_name': 'center rating',
                'verbose_name_plural': 'center ratings',
            },
        ),
    ]
